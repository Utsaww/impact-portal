{"version":3,"sources":["../../src/lib/common/helpers/checkboard.ts","../../../src/lib/common/checkboard.component.ts","../../../src/lib/common/coordinates.directive.ts","../../../src/lib/common/alpha.component.ts","../../src/lib/common/helpers/color.ts","../../../src/lib/common/color-wrap.component.ts","../../../src/lib/common/editable-input.component.ts","../../../src/lib/common/hue.component.ts","../../../src/lib/common/raised.component.ts","../../../src/lib/common/saturation.component.ts","../../../src/lib/common/swatch.component.ts","../../../src/lib/common/shade.component.ts"],"names":["checkboardCache","render","c1","c2","size","document","canvas","createElement","width","height","ctx","getContext","fillStyle","fillRect","translate","toDataURL","getCheckerboard","key","checkboard","CheckboardComponent","this","white","grey","prototype","ngOnInit","background","gridStyles","borderRadius","boxShadow","Component","args","selector","template","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","Input","NgModule","declarations","exports","imports","CommonModule","CoordinatesDirective","el","coordinatesChange","Subject","mousechange","mouseListening","mousemove","$event","x","y","isTouch","preventDefault","next","mouseup","mousedown","_this","sub","pipe","distinctUntilChanged","p","q","subscribe","n","handleChange","ngOnDestroy","unsubscribe","containerWidth","nativeElement","clientWidth","containerHeight","clientHeight","left","getBoundingClientRect","window","pageXOffset","top","pageYOffset","Directive","ElementRef","Output","HostListener","type","AlphaComponent","direction","onChange","EventEmitter","ngOnChanges","pointerLeft","pointerTop","rgb","a","gradient","r","g","b","_a","data","Math","round","hsl","h","s","l","source","emit","simpleCheckForValidColor","checked","passed","forEach","letter","isNaN","test","toState","oldHue","disableAlpha","color","hex","TinyColor","setAlpha","toHsl","hsv","toHsv","toRgb","toHex","toHexString","CheckboardModule","CoordinatesModule","ColorWrap","onChangeComplete","onSwatchHover","changes","debounceTime","setState","currentColor","afterValidChange","handleSwatchHover","EditableInputComponent","placeholder","focus","wrapStyle","style","wrap","inputStyle","input","labelStyle","label","dragLabel","cursor","handleFocus","handleFocusOut","currentValue","blurValue","handleKeydown","stringValue","String","target","value","isPercentage","indexOf","num","Number","replace","amount","arrowOffset","keyCode","_b","handleKeyup","toUpperCase","fromEvent","ev","handleDrag","handleMousedown","newValue","movementX","dragMax","HueComponent","hidePointer","zDepth","radius","RaisedComponent","SaturationComponent","v","saturation","bright","SwatchComponent","focusStyle","onClick","onHover","divStyles","focusStyles","inFocus","Object","assign","currentStyles","handleHover","handleClick","ShadeComponent","col","isValid"],"mappings":"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","sourcesContent":["const checkboardCache: {[key: string]: string} = {};\n\nexport function render(c1: string, c2: string, size: number) {\n  if (typeof document === 'undefined') {\n    return null;\n  }\n  const canvas = document.createElement('canvas');\n  canvas.width = size * 2;\n  canvas.height = size * 2;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return null;\n  } // If no context can be found, return early.\n  ctx.fillStyle = c1;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = c2;\n  ctx.fillRect(0, 0, size, size);\n  ctx.translate(size, size);\n  ctx.fillRect(0, 0, size, size);\n  return canvas.toDataURL();\n}\n\nexport function getCheckerboard(c1: string, c2: string, size: number) {\n  const key = `${c1}-${c2}-${size}`;\n  if (checkboardCache[key]) {\n    return checkboardCache[key];\n  }\n  const checkboard = render(c1, c2, size);\n  if (!checkboard) {\n    return null;\n  }\n  checkboardCache[key] = checkboard;\n  return checkboard;\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  NgModule,\n  OnInit,\n} from '@angular/core';\n\nimport { getCheckerboard } from './helpers/checkboard';\n\n@Component({\n  selector: 'color-checkboard',\n  template: `<div class=\"grid\" [ngStyle]=\"gridStyles\"></div>`,\n  styles: [\n    `\n  .grid {\n    top: 0px;\n    right: 0px;\n    bottom: 0px;\n    left: 0px;\n    position: absolute;\n  }\n  `,\n  ],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckboardComponent implements OnInit {\n  @Input() white = 'transparent';\n  @Input() size = 8;\n  @Input() grey = 'rgba(0,0,0,.08)';\n  @Input() boxShadow!: string;\n  @Input() borderRadius!: string;\n  gridStyles!: Record<string, string>;\n\n  ngOnInit() {\n    const background = getCheckerboard(this.white, this.grey, this.size);\n    this.gridStyles = {\n      borderRadius: this.borderRadius,\n      boxShadow: this.boxShadow,\n      background: `url(${background}) center left`,\n    };\n  }\n}\n\n@NgModule({\n  declarations: [CheckboardComponent],\n  exports: [CheckboardComponent],\n  imports: [CommonModule],\n})\nexport class CheckboardModule {}\n","import {\n  Directive,\n  ElementRef,\n  HostListener,\n  NgModule,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\n\nimport { Subject, Subscription } from 'rxjs';\nimport { distinctUntilChanged } from 'rxjs/operators';\n\n@Directive({ selector: '[ngx-color-coordinates]' })\nexport class CoordinatesDirective implements OnInit, OnDestroy {\n  @Output()\n  coordinatesChange = new Subject<{\n    x: number;\n    y: number;\n    top: number;\n    left: number;\n    containerWidth: number;\n    containerHeight: number;\n    $event: any;\n  }>();\n  private mousechange = new Subject<{\n    x: number;\n    y: number;\n    $event: any;\n    isTouch: boolean;\n  }>();\n\n  private mouseListening = false;\n  private sub!: Subscription;\n  @HostListener('window:mousemove', ['$event', '$event.pageX', '$event.pageY'])\n  @HostListener('window:touchmove', [\n    '$event',\n    '$event.touches[0].clientX',\n    '$event.touches[0].clientY',\n    'true',\n  ])\n  mousemove($event: Event, x: number, y: number, isTouch = false) {\n    if (this.mouseListening) {\n      $event.preventDefault();\n      this.mousechange.next({ $event, x, y, isTouch });\n    }\n  }\n  @HostListener('window:mouseup')\n  @HostListener('window:touchend')\n  mouseup() {\n    this.mouseListening = false;\n  }\n  @HostListener('mousedown', ['$event', '$event.pageX', '$event.pageY'])\n  @HostListener('touchstart', [\n    '$event',\n    '$event.touches[0].clientX',\n    '$event.touches[0].clientY',\n    'true',\n  ])\n  mousedown($event: Event, x: number, y: number, isTouch = false) {\n    $event.preventDefault();\n    this.mouseListening = true;\n    this.mousechange.next({ $event, x, y, isTouch });\n  }\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit() {\n    this.sub = this.mousechange\n      .pipe(\n        // limit times it is updated for the same area\n        distinctUntilChanged((p, q) => p.x === q.x && p.y === q.y),\n      )\n      .subscribe(n => this.handleChange(n.x, n.y, n.$event, n.isTouch));\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n  handleChange(x: number, y: number, $event: Event, isTouch: boolean) {\n    const containerWidth = this.el.nativeElement.clientWidth;\n    const containerHeight = this.el.nativeElement.clientHeight;\n    const left =\n      x -\n      (this.el.nativeElement.getBoundingClientRect().left + window.pageXOffset);\n    let top = y - this.el.nativeElement.getBoundingClientRect().top;\n\n    if (!isTouch) {\n      top = top - window.pageYOffset;\n    }\n    this.coordinatesChange.next({\n      x,\n      y,\n      top,\n      left,\n      containerWidth,\n      containerHeight,\n      $event,\n    });\n  }\n}\n\n@NgModule({\n  declarations: [CoordinatesDirective],\n  exports: [CoordinatesDirective],\n})\nexport class CoordinatesModule {}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  NgModule,\n  OnChanges,\n  Output,\n} from '@angular/core';\n\nimport { CheckboardModule } from './checkboard.component';\nimport { CoordinatesModule } from './coordinates.directive';\nimport { HSLA, RGBA } from './helpers/color.interfaces';\n\n\n@Component({\n  selector: 'color-alpha',\n  template: `\n  <div class=\"alpha\" [style.border-radius]=\"radius\">\n    <div class=\"alpha-checkboard\">\n      <color-checkboard></color-checkboard>\n    </div>\n    <div class=\"alpha-gradient\" [ngStyle]=\"gradient\" [style.box-shadow]=\"shadow\" [style.border-radius]=\"radius\"></div>\n    <div ngx-color-coordinates (coordinatesChange)=\"handleChange($event)\" class=\"alpha-container color-alpha-{{direction}}\">\n      <div class=\"alpha-pointer\" [style.left.%]=\"pointerLeft\" [style.top.%]=\"pointerTop\">\n        <div class=\"alpha-slider\" [ngStyle]=\"pointer\"></div>\n      </div>\n    </div>\n  </div>\n  `,\n  styles: [\n    `\n    .alpha {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .alpha-checkboard {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      overflow: hidden;\n    }\n    .alpha-gradient {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .alpha-container {\n      position: relative;\n      height: 100%;\n      margin: 0 3px;\n    }\n    .alpha-pointer {\n      position: absolute;\n    }\n    .alpha-slider {\n      width: 4px;\n      border-radius: 1px;\n      height: 8px;\n      box-shadow: 0 0 2px rgba(0, 0, 0, .6);\n      background: #fff;\n      margin-top: 1px;\n      transform: translateX(-2px);\n    },\n  `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class AlphaComponent implements OnChanges {\n  @Input() hsl!: HSLA;\n  @Input() rgb!: RGBA;\n  @Input() pointer!: Record<string, string>;\n  @Input() shadow!: string;\n  @Input() radius!: number | string;\n  @Input() direction: 'horizontal' | 'vertical' = 'horizontal';\n  @Output() onChange = new EventEmitter<any>();\n  gradient!: Record<string, string>;\n  pointerLeft!: number;\n  pointerTop!: number;\n\n  ngOnChanges() {\n    if (this.direction === 'vertical') {\n      this.pointerLeft = 0;\n      this.pointerTop = this.rgb.a * 100;\n      this.gradient = {\n        background: `linear-gradient(to bottom, rgba(${this.rgb.r},${\n          this.rgb.g\n        },${this.rgb.b}, 0) 0%,\n          rgba(${this.rgb.r},${this.rgb.g},${this.rgb.b}, 1) 100%)`,\n      };\n    } else {\n      this.gradient = {\n        background: `linear-gradient(to right, rgba(${this.rgb.r},${\n          this.rgb.g\n        },${this.rgb.b}, 0) 0%,\n          rgba(${this.rgb.r},${this.rgb.g},${this.rgb.b}, 1) 100%)`,\n      };\n      this.pointerLeft = this.rgb.a * 100;\n    }\n  }\n  handleChange({ top, left, containerHeight, containerWidth, $event }): void {\n    let data: any;\n    if (this.direction === 'vertical') {\n      let a: number;\n      if (top < 0) {\n        a = 0;\n      } else if (top > containerHeight) {\n        a = 1;\n      } else {\n        a = Math.round(top * 100 / containerHeight) / 100;\n      }\n\n      if (this.hsl.a !== a) {\n        data = {\n          h: this.hsl.h,\n          s: this.hsl.s,\n          l: this.hsl.l,\n          a,\n          source: 'rgb',\n        };\n      }\n    } else {\n      let a: number;\n      if (left < 0) {\n        a = 0;\n      } else if (left > containerWidth) {\n        a = 1;\n      } else {\n        a = Math.round(left * 100 / containerWidth) / 100;\n      }\n\n      if (this.hsl.a !== a) {\n        data = {\n          h: this.hsl.h,\n          s: this.hsl.s,\n          l: this.hsl.l,\n          a,\n          source: 'rgb',\n        };\n      }\n    }\n\n    if (!data) {\n      return;\n    }\n\n    this.onChange.emit({ data, $event });\n  }\n}\n\n@NgModule({\n  declarations: [AlphaComponent],\n  exports: [AlphaComponent],\n  imports: [CommonModule, CheckboardModule, CoordinatesModule],\n})\nexport class AlphaModule {}\n","import { TinyColor } from '@ctrl/tinycolor';\n\nimport { Color } from './color.interfaces';\n\nexport function simpleCheckForValidColor(data) {\n  const keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];\n  let checked = 0;\n  let passed = 0;\n  keysToCheck.forEach(letter => {\n    if (!data[letter]) {\n      return;\n    }\n    checked += 1;\n    if (!isNaN(data[letter])) {\n      passed += 1;\n    }\n    if (letter === 's' || letter === 'l') {\n      const percentPatt = /^\\d+%$/;\n      if (percentPatt.test(data[letter])) {\n        passed += 1;\n      }\n    }\n  });\n  return checked === passed ? data : false;\n}\n\nexport function toState(data, oldHue?: number, disableAlpha?: boolean): Color {\n  const color = data.hex ? new TinyColor(data.hex) : new TinyColor(data);\n  if (disableAlpha) {\n    color.setAlpha(1);\n  }\n\n  const hsl = color.toHsl();\n  const hsv = color.toHsv();\n  const rgb = color.toRgb();\n  const hex = color.toHex();\n  if (hsl.s === 0) {\n    hsl.h = oldHue || 0;\n    hsv.h = oldHue || 0;\n  }\n  const transparent = hex === '000000' && rgb.a === 0;\n\n  return {\n    hsl,\n    hex: transparent ? 'transparent' : color.toHexString(),\n    rgb,\n    hsv,\n    oldHue: data.h || oldHue || hsl.h,\n    source: data.source,\n  };\n}\n\nexport function isValidHex(hex: string) {\n  return new TinyColor(hex).isValid;\n}\n\nexport function getContrastingColor(data) {\n  if (!data) {\n    return '#fff';\n  }\n  const col = toState(data);\n  if (col.hex === 'transparent') {\n    return 'rgba(0,0,0,0.4)';\n  }\n  const yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;\n  return yiq >= 128 ? '#000' : '#fff';\n}\n","import { CommonModule } from '@angular/common';\nimport {\n  Component,\n  EventEmitter,\n  Input,\n  NgModule,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\n\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { simpleCheckForValidColor, toState } from './helpers/color';\nimport { Color, HSLA, HSVA, RGBA } from './helpers/color.interfaces';\n\nexport interface ColorEvent {\n  $event: Event;\n  color: Color;\n}\n\n@Component({\n  // create seletor base for test override property\n  selector: 'color-wrap',\n  template: ``,\n})\nexport class ColorWrap implements OnInit, OnChanges, OnDestroy {\n  @Input() className?: string;\n  @Input() color: HSLA | HSVA | RGBA | string = {\n    h: 250,\n    s: 0.5,\n    l: 0.2,\n    a: 1,\n  };\n  @Output() onChange = new EventEmitter<ColorEvent>();\n  @Output() onChangeComplete = new EventEmitter<ColorEvent>();\n  @Output() onSwatchHover = new EventEmitter<ColorEvent>();\n  oldHue!: number;\n  hsl!: HSLA;\n  hsv!: HSVA;\n  rgb!: RGBA;\n  hex!: string;\n  source!: string;\n  currentColor!: string;\n  changes!: Subscription;\n  disableAlpha?: boolean;\n\n  ngOnInit() {\n    this.changes = this.onChange\n      .pipe(debounceTime(100))\n      .subscribe(x => this.onChangeComplete.emit(x));\n    this.setState(toState(this.color, 0));\n    this.currentColor = this.hex;\n  }\n  ngOnChanges() {\n    this.setState(toState(this.color, this.oldHue));\n  }\n  ngOnDestroy() {\n    this.changes.unsubscribe();\n  }\n  setState(data) {\n    this.oldHue = data.oldHue;\n    this.hsl = data.hsl;\n    this.hsv = data.hsv;\n    this.rgb = data.rgb;\n    this.hex = data.hex;\n    this.source = data.source;\n    this.afterValidChange();\n  }\n  handleChange(data, $event) {\n    const isValidColor = simpleCheckForValidColor(data);\n    if (isValidColor) {\n      const color = toState(data, data.h || this.oldHue, this.disableAlpha);\n      this.setState(color);\n      this.onChange.emit({ color, $event });\n      this.afterValidChange();\n    }\n  }\n  /** hook for components after a complete change */\n  afterValidChange() {}\n\n  handleSwatchHover(data, $event) {\n    const isValidColor = simpleCheckForValidColor(data);\n    if (isValidColor) {\n      const color = toState(data, data.h || this.oldHue);\n      this.setState(color);\n      this.onSwatchHover.emit({ color, $event });\n    }\n  }\n}\n\n@NgModule({\n  declarations: [ColorWrap],\n  exports: [ColorWrap],\n  imports: [CommonModule],\n})\nexport class ColorWrapModule {}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  NgModule,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\n\nimport { fromEvent, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'color-editable-input',\n  template: `\n    <div class=\"wrap\" [ngStyle]=\"wrapStyle\">\n      <input\n        [ngStyle]=\"inputStyle\"\n        spellCheck=\"false\"\n        [value]=\"currentValue\"\n        [placeholder]=\"placeholder\"\n        (keydown)=\"handleKeydown($event)\"\n        (keyup)=\"handleKeyup($event)\"\n        (focus)=\"handleFocus($event)\"\n        (focusout)=\"handleFocusOut($event)\"\n      />\n      <span *ngIf=\"label\" [ngStyle]=\"labelStyle\" (mousedown)=\"handleMousedown($event)\">\n        {{ label }}\n      </span>\n    </div>\n  `,\n  styles: [\n    `\n      :host {\n        display: flex;\n      }\n      .wrap {\n        position: relative;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class EditableInputComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() style!: {\n    wrap?: Record<string, any>;\n    input?: Record<string, any>;\n    label?: Record<string, any>;\n  };\n  @Input() label!: string;\n  @Input() value!: string | number;\n  @Input() arrowOffset!: number;\n  @Input() dragLabel!: boolean;\n  @Input() dragMax!: number;\n  @Input() placeholder = '';\n  @Output() onChange = new EventEmitter();\n  currentValue!: string | number;\n  blurValue!: string;\n  wrapStyle!: Record<string, string>;\n  inputStyle!: Record<string, string>;\n  labelStyle!: Record<string, string>;\n  focus = false;\n  mousemove!: Subscription;\n  mouseup!: Subscription;\n\n  ngOnInit() {\n    this.wrapStyle = this.style && this.style.wrap ? this.style.wrap : {};\n    this.inputStyle = this.style && this.style.input ? this.style.input : {};\n    this.labelStyle = this.style && this.style.label ? this.style.label : {};\n    if (this.dragLabel) {\n      this.labelStyle.cursor = 'ew-resize';\n    }\n  }\n  handleFocus($event) {\n    this.focus = true;\n  }\n  handleFocusOut($event) {\n    this.focus = false;\n    this.currentValue = this.blurValue;\n  }\n  handleKeydown($event) {\n    // In case `e.target.value` is a percentage remove the `%` character\n    // and update accordingly with a percentage\n    // https://github.com/casesandberg/react-color/issues/383\n    const stringValue = String($event.target.value);\n    const isPercentage = stringValue.indexOf('%') > -1;\n    const num = Number(stringValue.replace(/%/g, ''));\n    if (isNaN(num)) {\n      return;\n    }\n    const amount = this.arrowOffset || 1;\n\n    // Up\n    if ($event.keyCode === 38) {\n      if (this.label) {\n        this.onChange.emit({\n          data: { [this.label]: num + amount },\n          $event,\n        });\n      } else {\n        this.onChange.emit({ data: num + amount, $event });\n      }\n\n      if (isPercentage) {\n        this.currentValue = `${num + amount}%`;\n      } else {\n        this.currentValue = num + amount;\n      }\n    }\n\n    // Down\n    if ($event.keyCode === 40) {\n      if (this.label) {\n        this.onChange.emit({\n          data: { [this.label]: num - amount },\n          $event,\n        });\n      } else {\n        this.onChange.emit({ data: num - amount, $event });\n      }\n\n      if (isPercentage) {\n        this.currentValue = `${num - amount}%`;\n      } else {\n        this.currentValue = num - amount;\n      }\n    }\n  }\n  handleKeyup($event) {\n    if ($event.keyCode === 40 || $event.keyCode === 38) {\n      return;\n    }\n    if (`${this.currentValue}` === $event.target.value) {\n      return;\n    }\n\n    if (this.label) {\n      this.onChange.emit({\n        data: { [this.label]: $event.target.value },\n        $event,\n      });\n    } else {\n      this.onChange.emit({ data: $event.target.value, $event });\n    }\n  }\n  ngOnChanges() {\n    if (!this.focus) {\n      this.currentValue = String(this.value).toUpperCase();\n      this.blurValue = String(this.value).toUpperCase();\n    } else {\n      this.blurValue = String(this.value).toUpperCase();\n    }\n  }\n  ngOnDestroy() {\n    this.unsubscribe();\n  }\n  subscribe() {\n    this.mousemove = fromEvent(document, 'mousemove').subscribe((ev: Event) => this.handleDrag(ev));\n    this.mouseup = fromEvent(document, 'mouseup').subscribe(() => this.unsubscribe());\n  }\n  unsubscribe() {\n    if (this.mousemove) {\n      this.mousemove.unsubscribe();\n    }\n    if (this.mouseup) {\n      this.mouseup.unsubscribe();\n    }\n  }\n  handleMousedown($event: Event) {\n    if (this.dragLabel) {\n      $event.preventDefault();\n      this.handleDrag($event);\n      this.subscribe();\n    }\n  }\n  handleDrag($event) {\n    if (this.dragLabel) {\n      const newValue = Math.round(this.value + $event.movementX);\n      if (newValue >= 0 && newValue <= this.dragMax) {\n        this.onChange.emit({ data: { [this.label]: newValue }, $event });\n      }\n    }\n  }\n}\n\n@NgModule({\n  declarations: [EditableInputComponent],\n  exports: [EditableInputComponent],\n  imports: [CommonModule],\n})\nexport class EditableInputModule {}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  NgModule,\n  OnChanges,\n  Output,\n} from '@angular/core';\n\nimport { CoordinatesModule } from './coordinates.directive';\nimport { HSLA, HSLAsource } from './helpers/color.interfaces';\n\n@Component({\n  selector: 'color-hue',\n  template: `\n  <div class=\"color-hue color-hue-{{direction}}\" [style.border-radius.px]=\"radius\" [style.box-shadow]=\"shadow\">\n    <div ngx-color-coordinates (coordinatesChange)=\"handleChange($event)\" class=\"color-hue-container\">\n      <div class=\"color-hue-pointer\" [style.left]=\"left\" [style.top]=\"top\" *ngIf=\"!hidePointer\">\n        <div class=\"color-hue-slider\" [ngStyle]=\"pointer\"></div>\n      </div>\n    </div>\n  </div>\n  `,\n  styles: [\n    `\n    .color-hue {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .color-hue-container {\n      margin: 0 2px;\n      position: relative;\n      height: 100%;\n    }\n    .color-hue-pointer {\n      position: absolute;\n    }\n    .color-hue-slider {\n      margin-top: 1px;\n      width: 4px;\n      border-radius: 1px;\n      height: 8px;\n      box-shadow: 0 0 2px rgba(0, 0, 0, .6);\n      background: #fff;\n      transform: translateX(-2px);\n    }\n    .color-hue-horizontal {\n      background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n        33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n    }\n    .color-hue-vertical {\n      background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n        #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n    }\n  `,\n  ],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HueComponent implements OnChanges {\n  @Input() hsl!: HSLA;\n  @Input() pointer!: Record<string, string>;\n  @Input() radius!: number;\n  @Input() shadow!: string;\n  @Input() hidePointer = false;\n  @Input() direction: 'horizontal' | 'vertical' = 'horizontal';\n  @Output() onChange = new EventEmitter<{ data: HSLAsource; $event: Event }>();\n  left = '0px';\n  top = '';\n\n  ngOnChanges(): void {\n    if (this.direction === 'horizontal') {\n      this.left = `${this.hsl.h * 100 / 360}%`;\n    } else {\n      this.top = `${-(this.hsl.h * 100 / 360) + 100}%`;\n    }\n  }\n  handleChange({ top, left, containerHeight, containerWidth, $event }): void {\n    let data: HSLAsource | undefined;\n    if (this.direction === 'vertical') {\n      let h: number;\n      if (top < 0) {\n        h = 359;\n      } else if (top > containerHeight) {\n        h = 0;\n      } else {\n        const percent = -(top * 100 / containerHeight) + 100;\n        h = 360 * percent / 100;\n      }\n\n      if (this.hsl.h !== h) {\n        data = {\n          h,\n          s: this.hsl.s,\n          l: this.hsl.l,\n          a: this.hsl.a,\n          source: 'rgb',\n        };\n      }\n    } else {\n      let h: number;\n      if (left < 0) {\n        h = 0;\n      } else if (left > containerWidth) {\n        h = 359;\n      } else {\n        const percent = left * 100 / containerWidth;\n        h = 360 * percent / 100;\n      }\n\n      if (this.hsl.h !== h) {\n        data = {\n          h,\n          s: this.hsl.s,\n          l: this.hsl.l,\n          a: this.hsl.a,\n          source: 'rgb',\n        };\n      }\n    }\n\n    if (!data) {\n      return;\n    }\n\n    this.onChange.emit({ data, $event });\n  }\n}\n\n@NgModule({\n  declarations: [HueComponent],\n  exports: [HueComponent],\n  imports: [CommonModule, CoordinatesModule],\n})\nexport class HueModule {}\n","import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, Input, NgModule } from '@angular/core';\n\nexport type zDepth = 0 | 1 | 2 | 3 | 4 | 5;\n\n@Component({\n  selector: 'color-raised',\n  template: `\n  <div class=\"raised-wrap\">\n    <div class=\"raised-bg zDepth-{{zDepth}}\" [style.background]=\"background\"></div>\n    <div class=\"raised-content\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n  `,\n  styles: [`\n    .raised-wrap {\n      position: relative;\n      display: inline-block;\n    }\n    .raised-bg {\n      position: absolute;\n      top: 0px;\n      right: 0px;\n      bottom: 0px;\n      left: 0px;\n    }\n    .raised-content {\n      position: relative;\n    }\n    .zDepth-0 {\n      box-shadow: none;\n    }\n    .zDepth-1 {\n      box-shadow: 0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16);\n    }\n    .zDepth-2 {\n      box-shadow: 0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2);\n    }\n    .zDepth-3 {\n      box-shadow: 0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24);\n    }\n    .zDepth-4 {\n      box-shadow: 0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22);\n    }\n    .zDepth-5 {\n      box-shadow: 0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2);\n    }\n  `],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RaisedComponent {\n  @Input() zDepth: zDepth = 1;\n  @Input() radius = 1;\n  @Input() background = '#fff';\n}\n\n@NgModule({\n  declarations: [RaisedComponent],\n  exports: [RaisedComponent],\n  imports: [CommonModule],\n})\nexport class RaisedModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  NgModule,\n  OnChanges,\n  Output,\n} from '@angular/core';\n\n\nimport { CoordinatesModule } from './coordinates.directive';\nimport { HSLA, HSVA, HSVAsource } from './helpers/color.interfaces';\n\n@Component({\n  selector: 'color-saturation',\n  template: `\n  <div class=\"color-saturation\" ngx-color-coordinates (coordinatesChange)=\"handleChange($event)\" [style.background]=\"background\">\n    <div class=\"saturation-white\">\n      <div class=\"saturation-black\"></div>\n      <div class=\"saturation-pointer\" [ngStyle]=\"pointer\" [style.top]=\"pointerTop\" [style.left]=\"pointerLeft\">\n        <div class=\"saturation-circle\" [ngStyle]=\"circle\"></div>\n      </div>\n    </div>\n  </div>\n  `,\n  styles: [\n    `\n    .saturation-white {\n      background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .saturation-black {\n      background: linear-gradient(to top, #000, rgba(0,0,0,0));\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .color-saturation {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .saturation-pointer {\n      position: absolute;\n      cursor: default;\n    }\n    .saturation-circle {\n      width: 4px;\n      height: 4px;\n      box-shadow: 0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3), 0 0 1px 2px rgba(0,0,0,.4);\n      border-radius: 50%;\n      cursor: hand;\n      transform: translate(-2px, -4px);\n    }\n  `,\n  ],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SaturationComponent implements OnChanges {\n  @Input() hsl!: HSLA;\n  @Input() hsv!: HSVA;\n  @Input() radius!: number;\n  @Input() pointer!: Record<string, string>;\n  @Input() circle!: Record<string, string>;\n  @Output() onChange = new EventEmitter<{ data: HSVAsource; $event: Event }>();\n  background!: string;\n  pointerTop!: string;\n  pointerLeft!: string;\n\n  ngOnChanges() {\n    this.background = `hsl(${this.hsl.h}, 100%, 50%)`;\n    this.pointerTop = -(this.hsv.v * 100) + 1 + 100 + '%';\n    this.pointerLeft = this.hsv.s * 100 + '%';\n  }\n  handleChange({ top, left, containerHeight, containerWidth, $event }) {\n    if (left < 0) {\n      left = 0;\n    } else if (left > containerWidth) {\n      left = containerWidth;\n    } else if (top < 0) {\n      top = 0;\n    } else if (top > containerHeight) {\n      top = containerHeight;\n    }\n\n    const saturation = left / containerWidth;\n    let bright = -(top / containerHeight) + 1;\n    bright = bright > 0 ? bright : 0;\n    bright = bright > 1 ? 1 : bright;\n\n    const data: HSVAsource = {\n      h: this.hsl.h,\n      s: saturation,\n      v: bright,\n      a: this.hsl.a,\n      source: 'hsva',\n    };\n    this.onChange.emit({ data, $event });\n  }\n}\n\n@NgModule({\n  declarations: [SaturationComponent],\n  exports: [SaturationComponent],\n  imports: [CommonModule, CoordinatesModule],\n})\nexport class SaturationModule {}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  NgModule,\n  OnInit,\n  Output,\n} from '@angular/core';\n\nimport { CheckboardModule } from './checkboard.component';\n\n@Component({\n  selector: 'color-swatch',\n  template: `\n    <div\n      class=\"swatch\"\n      [ngStyle]=\"currentStyles()\"\n      [attr.title]=\"color\"\n      (click)=\"handleClick(color, $event)\"\n      (keydown.enter)=\"handleClick(color, $event)\"\n      (focus)=\"handleFocus()\"\n      (blur)=\"handleFocusOut()\"\n      (mouseover)=\"handleHover(color, $event)\"\n      tabindex=\"0\"\n    >\n      <ng-content></ng-content>\n      <color-checkboard\n        *ngIf=\"color === 'transparent'\"\n        boxShadow=\"inset 0 0 0 1px rgba(0,0,0,0.1)\"\n      ></color-checkboard>\n    </div>\n  `,\n  styles: [\n    `\n      .swatch {\n        outline: none;\n        height: 100%;\n        width: 100%;\n        cursor: pointer;\n        position: relative;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SwatchComponent implements OnInit {\n  @Input() color!: string;\n  @Input() style: Record<string, string> = {};\n  @Input() focusStyle: Record<string, string> = {};\n  @Input() focus!: boolean;\n  @Output() onClick = new EventEmitter<any>();\n  @Output() onHover = new EventEmitter<any>();\n  divStyles: Record<string, string> = {};\n  focusStyles: Record<string, string> = {};\n  inFocus = false;\n\n  ngOnInit() {\n    this.divStyles = {\n      background: this.color as string,\n      ...this.style,\n    };\n  }\n  currentStyles() {\n    this.focusStyles = {\n      ...this.divStyles,\n      ...this.focusStyle,\n    };\n    return this.focus || this.inFocus ? this.focusStyles : this.divStyles;\n  }\n  handleFocusOut() {\n    this.inFocus = false;\n  }\n  handleFocus() {\n    this.inFocus = true;\n  }\n  handleHover(hex: string, $event) {\n    this.onHover.emit({ hex, $event });\n  }\n  handleClick(hex: string, $event) {\n    this.onClick.emit({ hex, $event });\n  }\n}\n\n@NgModule({\n  declarations: [SwatchComponent],\n  exports: [SwatchComponent],\n  imports: [CommonModule, CheckboardModule],\n})\nexport class SwatchModule {}\n","import { CommonModule } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  NgModule,\n  OnChanges,\n  Output,\n} from '@angular/core';\nimport { CoordinatesModule } from './coordinates.directive';\nimport { HSLA, RGBA } from './helpers/color.interfaces';\nimport { TinyColor } from '@ctrl/tinycolor';\n\n\n@Component({\n  selector: 'color-shade',\n  template: `\n    <div class=\"shade\" [style.border-radius]=\"radius\">\n      <div\n        class=\"shade-gradient\"\n        [ngStyle]=\"gradient\"\n        [style.box-shadow]=\"shadow\"\n        [style.border-radius]=\"radius\"\n      ></div>\n      <div\n        ngx-color-coordinates\n        (coordinatesChange)=\"handleChange($event)\"\n        class=\"shade-container\"\n      >\n        <div\n          class=\"shade-pointer\"\n          [style.left.%]=\"pointerLeft\"\n          [style.top.%]=\"pointerTop\"\n        >\n          <div class=\"shade-slider\" [ngStyle]=\"pointer\"></div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [\n    `\n    .shade {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .shade-gradient {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n    .shade-container {\n      position: relative;\n      height: 100%;\n      margin: 0 3px;\n    }\n    .shade-pointer {\n      position: absolute;\n    }\n    .shade-slider {\n      width: 4px;\n      border-radius: 1px;\n      height: 8px;\n      box-shadow: 0 0 2px rgba(0, 0, 0, .6);\n      background: #fff;\n      margin-top: 1px;\n      transform: translateX(-2px);\n    },\n  `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class ShadeComponent implements OnChanges {\n  @Input() hsl!: HSLA;\n  @Input() rgb!: RGBA;\n  @Input() pointer!: Record<string, string>;\n  @Input() shadow!: string;\n  @Input() radius!: string;\n  @Output() onChange = new EventEmitter<any>();\n  gradient!: Record<string, string>;\n  pointerLeft!: number;\n  pointerTop?: number;\n\n  ngOnChanges() {\n    this.gradient = {\n      background: `linear-gradient(to right,\n          hsl(${this.hsl.h}, 90%, 55%),\n          #000)`,\n    };\n    const hsv = new TinyColor(this.hsl).toHsv();\n    this.pointerLeft = 100 - (hsv.v * 100);\n  }\n\n  handleChange({ left, containerWidth, $event }): void {\n    let data;\n    let v: number;\n    if (left < 0) {\n      v = 0;\n    } else if (left > containerWidth) {\n      v = 1;\n    } else {\n      v = Math.round((left * 100) / containerWidth) / 100;\n    }\n\n    const hsv = new TinyColor(this.hsl).toHsv();\n    if (hsv.v !== v) {\n      data = {\n        h: this.hsl.h,\n        s: 100,\n        v: 1 - v,\n        l: this.hsl.l,\n        a: this.hsl.a,\n        source: 'rgb',\n      };\n    }\n\n    if (!data) {\n      return;\n    }\n\n    this.onChange.emit({ data, $event });\n  }\n}\n\n@NgModule({\n  declarations: [ShadeComponent],\n  exports: [ShadeComponent],\n  imports: [CommonModule, CoordinatesModule],\n})\nexport class ShadeModule {}\n"]}